'''
1. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
Об окончании ввода данных свидетельствует пустая строка.
'''
print('Давай создадим файл и запишем в него построчно данные. Для завершения ввода нажми Enter.')
with open("lesson_5_1.txt", 'w', encoding="utf-8") as f_5_1:
    i = 1
    inp = 'str'
    while inp != '':
        inp = input(f'Введите строку {i}: ')
        print(inp, file = f_5_1)
        i += 1

'''
2. Создать текстовый файл (не программно), сохранить в нем несколько строк,
выполнить подсчет количества строк, количества слов в каждой строке.
'''
def word(s_num): #функция определения склонения слова "слово" в зависимости от количества слов в строке
    last_int = int(str(s_num)[len(str(s_num))-1]) #определяем посленднюю цифру в числе слоф - от нее зависит склонение.
    if s_num >= 10 and s_num <= 20: #от 10 до 20 включительно - исключение без склонения
        s = 'слов'
    elif last_int == 1:
        s = 'слово'
    elif last_int >=2 and last_int <= 4:
        s = 'слова'
    else:
        s = 'слов'
    return s
'''
Первый способ:
- через преобразование содержимого файла в список -> работаем со списком.
'''
with open("lesson_5_2.txt", encoding="utf-8") as f_5_2: #открываем файл на чтение
    print('В нашем файле записан текст:')
    print(f'<<{f_5_2.read()}>>')
    f_5_2.seek(0)
    str_f = f_5_2.readlines()                     #преобразуем содержимое файл в список
    print(f'Всего строк в файле - {len(str_f)}.') #количество строк = длина списка
    for num, el in enumerate(str_f):               #рассматриваем каждый элемент списка (строку)
        print(f'Строка {num+1} содержит {len(el.split())} {word(len(el.split()))}') #разбиваем строку по разделителю на список. Длина списка - количество слов

'''
Второй способ:
- работаем со строками из файла.
'''

with open("lesson_5_2.txt", encoding="utf-8") as f_5_2:  # открываем файл на чтение
    print('В нашем файле записан текст:')
    print(f'<<{f_5_2.read()}>>')
    f_5_2.seek(0)
    n = 0                                               #счетчик строк
    for line in f_5_2:                                  #рассматриваем каждую строку файла
        n += 1                                          #нумеруем строку
        print(f'Строка {n} содержит {len(line.split())} {word(len(line.split()))}') #разбиваем строку по разделителю - длина - количество слов
    print(f'Всего строк в файле - {n}.')

'''
3. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов.
Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.
Выполнить подсчет средней величины дохода сотрудников.
'''
'''
    Рассмотрен вариант занесения окладов с:
    - разделитель разрядов - пробел - 20 000
    - разделитель разрядов - точка - 20.000
    - разделитель разрядов - запятая - 20,000
    В таком случае невозможно преобразовать строку к числу и производить сравнение больше/меньше/равно.
    Поэтому сначала проверяем на наличие посторонних символов - удаляем их.
    '''
with open("lesson_5_3.txt", encoding="utf-8") as f_5_3:  # открываем файл на чтение
    emp_fam = []    #список фамилий
    emp_rate = []   #список окладов
    for line in f_5_3:  #формируем списки окладов и фамилий. Split'ом делить не стала - ведь мы рассматриваем вариант, что оклад внесен с разделителем разрядов - пробелом
        i = line.find(' ')
        emp_fam.append(line[0:i])
        emp_rate.append(line[i+1:])

print('Оклад менее 20 000 руб. у следующих сотрудников: ')
for num, el in enumerate(emp_rate): #рассматриваем каждый оклад
    el = list(el)
    pos = [] #список для индексов ошибочно внесенных символов
    for n, e in enumerate(el):      #проверяем каждый элемент строки на ошибку ввода (точка,запятая, пробел между цифрами)
        if e == ' ' or e == '.' or e == ',':
            pos.append(n)
    el = [e for n, e in enumerate(el) if n not in pos]
    emp_rate[num] = int(''.join(el)) #перезаписываем элемент списка с окладом в числовом формате.
    if emp_rate[num] < 20000:
        print(emp_fam[num])
print(f'Средний доход сотрудников: {sum(emp_rate)/len(emp_rate)}')

'''
4. Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные.
При этом английские числительные должны заменяться на русские.
Новый блок строк должен записываться в новый текстовый файл.
'''
dict_ch = {'One': 'Один', 'Two':'Два', 'Three':'Три', 'Four':'Четыре', 'Five':'Пять', 'Six':'Шесть', 'Seven':'Семь', 'Eight':'Восемь', 'Nine':'Девять'}
f_5_4_ = open("lesson_5_4_.txt", 'w', encoding="utf-8")
with open("lesson_5_4.txt", encoding="utf-8") as f_5_4:
    for line in f_5_4:
        print(dict_ch.get(line.split()[0]), ' '.join(line.split()[1:]), file=f_5_4_)
f_5_4_.close()

'''
5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами.
Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.
'''

print('Введи числа через пробел (для завершения нажми Enter): ')
with open("lesson_5_5.txt", 'w+', encoding="utf-8") as f_5_5:
    print(input(), file = f_5_5) #записываем в файл вводимые пользователем данные
    f_5_5.seek(0)                #возвращаем указатель в начало строки
    try:
        '''
        Далее:
        - считываем данные из файла в строку
        - преобразуем строку в список - последний элемент - символ перехода на новую строку /n
        - берем все элементы списка, кроме последнего, объединяем обратно в строку
        - строку разбиваем на список по разделителю-пробелу
        '''
        ch_summ_list = (''.join((list(f_5_5.readline())[:-1]))).split(' ')
        print(f'Сумма введенных чисел: {sum(map(int,ch_summ_list))}')
    except ValueError:
        print('Ошибка! Необходимо вводить только числа.')

'''
6. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный
предмет и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество.
Важно, чтобы для каждого предмета не обязательно были все типы занятий.
Сформировать словарь, содержащий название предмета и общее количество занятий по нему.
Вывести словарь на экран.
Примеры строк файла:
Информатика: 100(л) 50(пр) 20(лаб).
Физика: 30(л) — 10(лаб)
Физкультура: — 30(пр) —

Пример словаря:
{“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
'''
dict_study = {}  #создаем словарь
print('Наши данные по предметам и количеству/типу занятий:')
with open("lesson_5_6.txt", encoding="utf-8") as f_5_6:   #открываем созданный файл на чтение
    for line in f_5_6:                                    #проходим по каждой строке
        print(line)
        summ_hour = 0                                     #задаем сумму часов по строке 0
        '''
        Далее:
        - строку делим на список по разделителю ':' - [0] элемент - название предмета (ключи словаря), [1] эл.- часы (прочерк) через пробел с наименованием типа занятий в ()
        - [1] элемент списка делим на список по разделителю пробел.
        - проходим по каждому элементу - выбираем только числовые значения
        - если получается не пустой элемент (в случае прочерка), то суммируем часы по каждому типу занятий.
        '''
        for el in line.split(':')[1].split(' '):
            if ''.join(i for i in el if i.isdigit()) != '':
                summ_hour += int(''.join(i for i in el if i.isdigit()))
        dict_study.update({line.split(': ')[0]:summ_hour}) #формируем словарь
    print()
    print('Итого предмет:количество часов:')
    print(dict_study) #выводим словарь

'''
7. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме:
название, форма собственности, выручка, издержки.
Пример строки файла: firm_1 ООО 10000 5000.
Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль.
Если фирма получила убытки, в расчет средней прибыли ее не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями,
а также словарь со средней прибылью.
Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
Итоговый список сохранить в виде json-объекта в соответствующий файл.
Пример json-объекта:
[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]

Подсказка: использовать менеджеры контекста.
'''
firm_profit = {}            #создаем словарь фирма:прибыль
average_profit_all = 0      #переменная для суммирования прибыли общей
firm_count = 0              #счетчик количества фирм с прибылью (убытки не считаем)
list_data = []              #создаем итоговый список
with open("lesson_5_7.txt", encoding="utf-8") as f_5_7:             #открываем созданный файл на чтение
    for line in f_5_7:                                              #проходим по каждой строке
        profit = int(line.split(' ')[2])-int(line.split(' ')[3])    #вычисляем прибыль (убытки) фирмы
        firm_profit.update({line.split(' ')[0]:profit})             #добавляем в словарь Фирма:прибыль(убытки)
        if profit > 0:                                              #если прибыль, то суммируем к общей сумме прибыли
            average_profit_all += int(line.split(' ')[2])-int(line.split(' ')[3])
            firm_count += 1
list_data.append(firm_profit)                                       #формируем список из словарей
list_data.append({'average_profit':average_profit_all//firm_count})
print(f'Итого список прибыли фирм и средняя прибыль (в словарях) {list_data}')
import json
with open("les_5_7_j.json", "w", encoding="utf-8") as f_j_5_7:
    json.dump(list_data, f_j_5_7)
    print('Данные записаны в JSON')









