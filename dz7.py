'''
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
(двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
'''
class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix

    def __str__(self):
        for el in self.matrix:
            for elem in el:
                print(elem, end = ' ')
            print()

    def __add__(self, other):
        m=[]
        from itertools import zip_longest
        for el in zip_longest(self.matrix, other.matrix, fillvalue=0):
            try:
                m.append([x + y for x, y in zip_longest(el[0], el[1], fillvalue=0)])
            except:
                if el[0] == 0:
                    m.append(el[1])
                else:
                    m.append(el[0])
        return Matrix(m).__str__()

m1 = Matrix([[1,2], [4,5,6], [7,8,9]])
print('Матрица 1:')
m1.__str__()

m2 = Matrix([[11,12,13], [14,15,16]])
print('Матрица 2:')
m2.__str__()

print('Сумма двух матриц:')
m1 + m2

'''
2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры:
размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы:
для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.
'''

from abc import ABC, abstractmethod

class Clothes(ABC):
    @abstractmethod
    def calc(self):
        print('Расход ткани на пошив', end=" ")

class Coat(Clothes):
    def __init__(self, V): #размер для пальто
        self.V = V

    @property
    def calc(self):
        Clothes.calc(self)
        return print(f'пальто размером {self.V} : {self.V/6.5 + 0.5} см')

class Suit(Clothes):
    def __init__(self, H): #рост для костюма
        self.H = H

    @property
    def calc(self):
        Clothes.calc(self)
        return print(f'костюма на рост {self.H} : {2 * self.H + 0.3} см')

c1 = Coat(42)
c1.calc
c2 = Suit(178)
c2.calc

'''
3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
(не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.

Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
'''

class Cell:
    def __init__(self, num):
        self.num = num
    def __add__(self,other): #сложение
        return print(f'Результат сложения двух клеток: новая клетка из {self.num + other.num} ячеек')
    def __sub__(self,other): #вычитание
        if self.num - other.num >= 0:
            return print(f'Результат вычитания двух клеток: новая клетка из {self.num - other.num} ячеек')
        else:
            return print('Первая клетка содержит ячеек меньше, чем вторая. Вычитание нецелесообразно')
    def __mul__(self, other): #умножение
        return print(f'Результат умножения двух клеток: новая клетка из {self.num * other.num} ячеек')
    def __truediv__(self, other): #деление
        if self.num // other.num > 0:
            return print(f'Результат деления двух клеток: новая клетка из {self.num // other.num} ячеек')
        else:
            return print('Первая клетка содержит ячеек меньше, чем вторая. Деление нецелесообразно')

    def make_order(self, row):
        str = ''
        for i in range(self.num // row):
            str += row * '*'+'\n'
        str += (self.num % row) * '*' +'\n'
        print(f'Клетка из {self.num} ячеек по рядам из {row} ячеек:')
        print(str)

cell_1 = Cell(84)
cell_2 = Cell(5)
cell_1 + cell_2
cell_1 - cell_2
cell_1 * cell_2
cell_1 / cell_2
cell_1.make_order(10)




